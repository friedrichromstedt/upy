b02.py
------

Verification that only the displayed portion of an object array is
transformed into strings.

With the first tests it became obvious that there are two calls more
than elements in the array.  Even with ``shape = numpy.asarray([1,
1])`` the only element string returned is "2"::
    
    [[2]]

With 5 by 5 elements, the result is::

    [[2 3 4 5 6]
     [7 8 9 10 11]
     [12 13 14 15 16]
     [17 18 19 20 21]
     [22 23 24 25 26]]

and still the first string used is "2" not "0".

With shape (50, 50), the result is::
    
    [[2 3 4 ..., 5 6 7]
     [8 9 10 ..., 11 12 13]
     [14 15 16 ..., 17 18 19]
     ..., 
     [20 21 22 ..., 23 24 25]
     [26 27 28 ..., 29 30 31]
     [32 33 34 ..., 35 36 37]]

which proves the assumtion that only the displayed elements are passed
through ``repr()``.


b03.py
------

Here, the coordinates of elements passed through repo() are printed as
they occur.

With the print statements of x and y commented out, with shape (1, 1),
the result is::

    (0, 0)
    (0, 0)
    (0, 0)
    [[2]]

Ditto, with shape (4, 4)::

    (1, 0)
    (2, 0)
    (0, 0)
    (1, 0)
    (2, 0)
    (3, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (3, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (3, 2)
    (0, 3)
    (1, 3)
    (2, 3)
    (3, 3)
    [[2 3 4 5]
     [6 7 8 9]
     [10 11 12 13]
     [14 15 16 17]]

The first two lines name the "extraneous" passes.  These two indices
are reproducible.

With the 'print x' statements no longer commented out, *and no further
change to the script*, the output changes to::

    x =
    [[0 1 2 3]
     [0 1 2 3]
     [0 1 2 3]
     [0 1 2 3]]
    (1, 0)
    (2, 1)
    (0, 0)
    (1, 0)
    (2, 0)
    (3, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (3, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (3, 2)
    (0, 3)
    (1, 3)
    (2, 3)
    (3, 3)
    [[2 3 4 5]
     [6 7 8 9]
     [10 11 12 13]
     [14 15 16 17]]

where the "extraenous" calls to ``X.__repr__()`` *changed their
index*.  With also 'print y' no longer commented out::

    x =
    [[0 1 2 3]
     [0 1 2 3]
     [0 1 2 3]
     [0 1 2 3]]
    y =
    [[0 0 0 0]
     [1 1 1 1]
     [2 2 2 2]
     [3 3 3 3]]
    (1, 0)
    (3, 2)
    (0, 0)
    (1, 0)
    (2, 0)
    (3, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (3, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (3, 2)
    (0, 3)
    (1, 3)
    (2, 3)
    (3, 3)
    [[2 3 4 5]
     [6 7 8 9]
     [10 11 12 13]
     [14 15 16 17]]

Again the indices of the extraneous calls changed.  Commenting out
'print x' again::

    y =
    [[0 0 0 0]
     [1 1 1 1]
     [2 2 2 2]
     [3 3 3 3]]
    (1, 0)
    (2, 1)
    (0, 0)
    (1, 0)
    (2, 0)
    (3, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (3, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (3, 2)
    (0, 3)
    (1, 3)
    (2, 3)
    (3, 3)
    [[2 3 4 5]
     [6 7 8 9]
     [10 11 12 13]
     [14 15 16 17]]

Leaving only the 'print "x ="' and 'print "y ="' statements not
commented out::

    x =
    y =
    (1, 0)
    (2, 0)
    (0, 0)
    (1, 0)
    (2, 0)
    (3, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (3, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (3, 2)
    (0, 3)
    (1, 3)
    (2, 3)
    (3, 3)
    [[2 3 4 5]
     [6 7 8 9]
     [10 11 12 13]
     [14 15 16 17]]

This is identical to the output with all print statements commented
out.

/  This is weird.  /

For completeness, with shape (50, 50), and all print statements
commented out::

    (2, 2)
    (0, 47)
    (0, 0)
    (1, 0)
    (2, 0)
    (47, 0)
    (48, 0)
    (49, 0)
    (0, 1)
    (1, 1)
    (2, 1)
    (47, 1)
    (48, 1)
    (49, 1)
    (0, 2)
    (1, 2)
    (2, 2)
    (47, 2)
    (48, 2)
    (49, 2)
    (0, 47)
    (1, 47)
    (2, 47)
    (47, 47)
    (48, 47)
    (49, 47)
    (0, 48)
    (1, 48)
    (2, 48)
    (47, 48)
    (48, 48)
    (49, 48)
    (0, 49)
    (1, 49)
    (2, 49)
    (47, 49)
    (48, 49)
    (49, 49)
    [[2 3 4 ..., 5 6 7]
     [8 9 10 ..., 11 12 13]
     [14 15 16 ..., 17 18 19]
     ..., 
     [20 21 22 ..., 23 24 25]
     [26 27 28 ..., 29 30 31]
     [32 33 34 ..., 35 36 37]]

again with weird coordinates.  The result changes again with
uncommenting the print statements, what is not documented further.

In general, the result is reproducible with changing the setup to a
previous state.  Also it appears that elements which are not printed
in the result are never passed through repr() by numpy.
