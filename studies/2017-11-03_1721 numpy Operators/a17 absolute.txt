.. vim: syntax=rst

Die Operation ``absolute`` soll implementiert werden durch::

    absolute(ua) = numpy.sqrt(ua * ua.conjugate()).real

bzw.::

    absolute(ua) = ((ua * ua.conjugate()) ** 0.5).real

Der Test ``[/tests/ad-hoc/2018-05-09_1108.py]`` legt die Vermutung nahe, dass der Imaginaerteil von ``numpy.sqrt(ua * ua.conjugate())`` *stets* verschwindet.  Bewiesen ist dies allerdings noch nicht.

Es gibt bei dieser Implementierung aber ein Problem: **Unsichere Nullen werden nicht korrekt verarbeitet.**

Es ergibt sich, dass bei ``ua = 0 +- <...>`` das Ergebnis fuer ``abs(ua)`` als ``0 +- nan`` berechnet wird.

Schuld daran ist die Wurzel in der Berechnung:

-   Sei ``ux = x +- <...>`` und ``uy = sqrt(ux)``, d.h. ``uy = ux ^ 0.5``.

-   Dann ist ``d(uy)/d(ux) = 0.5 . x ^ -0.5 = 0.5 1/sqrt(x)``.  Mit ``x`` gegen Null divergiert dies.  

Da ein derartiger Differentialquotient als Koeffizient fuer die Propagierung des Fehlers von ``ua * ua.conjugate()`` hin zu dem von ``abs(ua)`` Verwendung findet, kann das Ergebnis ``abs(ua)`` nicht als reelle Zahl dargestellt werden.

Eine alternative Berechnungsvorschrift waere::

    absolute(ua) = sqrt(ua) * sqrt(ua.conjugate())

aber hier tritt das Problem schlicht schon frueher auf, da ``ua`` und ``ua.conjugate()`` ebenfalls *unsichere Nullen* sind.

Fuer Werte ``ua = a +- <...>`` mit ``a != 0`` wird die Berechnung des Absolutwerts *korrekt ausgefuehrt*, auch fuer sehr *kleine* ``a``.


.. rubric:: Freitag, d. 25. Mai 2018, 7:29 Uhr in KH


Vollstaendigere Untersuchung
============================

Berechnung von ``squ = ua * ua.conjugate()``
--------------------------------------------

Wir behandeln hier beispielhaft eine einzelne *Abhaengigkeit* eines undarrays ``ua`` mit einer beliebigen komplexen Abhaengigkeit ``u`` und Nennwert ``a``, notiert als::

    ua = a +- u

Dann gilt::

    ua.conj() = a.conj() +- u.conj()

Die Instruktionen bei Berechnung von ``squ = ua * ua.conj()`` in :meth:`Binary.__call__` sind dann:
    
1.  ``x1 = ua`` und ``x2 = ua.conj()``.  ``y1 = a``, ``y2 = a.conj()``.  ``result = undarray(y1 * y2) = undarray(a * a.conj())``.

2.  ``result.depend(other=ua, derivative=a.conj())``:

    a.  ``source = ua.dependencies[0]``, ``source.derivatives == u``.

        Notiere ``Dependency(derivative=d)`` als ``{d}``.  ``source == {u}``.

    b.  ``source_remnant = source * derivative = {u} * a.conj() = {u * a.conj()}``.

    c.  Unter Vernachlaessigung des Broadcastings auf den *shape* von ``result`` wird ``source_remnant`` zu der Liste der Abhaengigkeiten von ``result`` hinzugefuegt::

            result.append({u * a.conj()})

3.  ``result.depend(other=ua.conj(), derivative=a)``:

    a.  ``source = (ua.conj()).dependencies[0] == {u.conj()}``.

    b.  ``source_remnant = source * derivative = {u.conj()} * a = {u.conj() * a}``.

    c.  ``source_remnant`` wird zur in (2.) erzeugten ``Dependency`` von ``result`` *addiert*, im Wesentlichen::

            result.dependencies[0].add(source_remnant)

        Sodass sich ``result.dependencies[0]`` darstellt als::

            result.dependencies[0] == {u * a.conj() + u.conj() * a}

Insgesamt ergibt sich so::

    squ = ua * ua.conj() == [a * a.conj()] +- [u * a.conj() + u.conj() * a]

Dabei ist ``a * a.conj()`` das Betragsquadrat von ``a``::

    a * a.conj() == |a| ^ 2

und fuer die Abhaengigkeit gilt::

    u * a.conj() + u.conj() * a
    == [u * a.conj()] + [u * a.conj()].conj() == 2 Re{u * a.conj()}
    == [u.conj() * a].conj() + [u.conj() * a] == 2 Re{u.conj() * a}

Der Imaginaerteil von ``squ`` verschwindet also.

Schreibt man::

    a = A exp(i phia)
    u = U exp(i phiu)

mit rellen ``A`` und ``U``, so gilt weiter::

    a * u.conj() + a.conj() * u
    == 2 Re{A U exp(phia) exp(phiu).conj()}
    == 2 Re{A U exp(phia - phiu)}
    == 2 A U cos(phia - phiu)

Bei in der komplexen Ebene orthogonalen ``a`` und ``u`` resultiert also ``+- 0``, bei gleichgerichteten ``a`` und ``u`` gilt (``phia == phiu``)::

    2 A U cos(phia - phiu) == 2 A U

Insgesamt ergibt sich mit der Benennung ``mu = cos(phia - phiu)``::

    squ = ua * ua.conj() == |a| ^ 2 +- 2 mu A U

Bei ``A == 0`` ergibt sich *stets* ``0 +- 0``.

Beispiele:

#.  ``A = 10``, ``U = 2``, ``mu = 1.0``::

        squ = 100 +- 40

#.  ``X exp(i phix)`` bleibt sich gleich, wenn das Vorzeichen von ``X`` umgekehrt wird und zu ``phix`` ein Summand ``pi`` oder ``-pi`` hinzutritt.  Wendet man dies auf ``u`` an ergibt sich: ``A = 10``, ``U = -2``, ``mu = -1.0`` und das Ergebnis bleibt ungeaendert::

        squ = 100 +- 40

    denn ``a`` und ``u`` bleiben sich gleich.

#.  Invertiert man nur bspw. ``U`` *ohne* Umkehrung der Richtung ``phiu``, so ergibt sich nun mit ``A = 10``, ``U = -2``, ``mu = 1.0``::

        squ = 100 +- -40


Berechnung von ``uabs = squ ** 0.5``
------------------------------------

Es sei ``squ`` wie oben gegeben::

    squ = |a| ^ 2 +- 2 mu A U

und es wird berechnet::

    uabs = squ ** 0.5

Instruktionen in ``Binary.__call__``:

1.  ``x1 = squ`` und ``x2 = 0.5``.  ``y1 = squ.nominal == |a| ^ 2`` und ``y2 = 0.5``.  ``result = undarray(y1 ** y2) = undarray(|a|)``.

2.  Es wird nur bzgl. ``x1`` ein ``.depend``-Aufruf durchgefuehrt.  Dabei ist die Ableitung::

        ``y2 * (y1 ** (y2 - 1))``
        == 0.5 * y1 ** -0.5
        == 0.5 / |a|

    Dann wird ausgefuehrt::

        result.depend(other=squ, derivative=(0.5 / |a|))

    Im ``.depend``-Aufruf gilt dann:

    a.  ``source = squ.dependencies[0] = {2 mu A U}``.

    b.  ``source_remnant = source * derivative == {2 mu A U} * (0.5 / |a|) == {mu A U / |a|} = {mu U sign(A)}``
    
    c.  ``result.append(source_remnant)`` (unter Vernachlaessigung des Broadcastings von ``source_remnant`` auf den *shape* von ``result``).

Es ergibt sich insgesamt::

    uabs = |a| +- (mu U sign(A))

sodass sich als ``uabs.stddev`` ergibt::

    uabs.stddev == |mu U|

Deutung des Terms ``(mu U sign(A))``:

-   ``mu`` *projiziert* die komplexe Unsicherheit ``U exp(i phiu)`` auf den komplexen Nennwert ``A exp(i phia)``.  Wenn ``U`` positiv ist, ist auch die *Projektion* positiv, wenn ``U`` negativ ist, ist die Projektion negativ.

-   Wenn ``A > 0``, ist ``sign(A) == +1``.  Bei ``U > 0`` weisen ``a`` und ``mu U exp(i phia)`` in *dieselbe Richtung*; der Unsicherheitsterm des Betrags ``uabs`` weist nach *rechts* zu positiven Werten.  Entsprechend weist der Unsicherheitsterm von ``uabs`` nach *links* wenn ``U < 0`` ist.

-   Wenn jedoch ``A < 0`` ist, kehrt sich die relative Richtung von ``mu U exp(i phia)`` und ``a`` um; der Unsicherherheitsterm von ``uabs`` weist bei ``U > 0`` nach *links* und bei ``U < 0`` nach *rechts*.


Probiere eine klarere Deutung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Die Darstellung einer komplexen Zahl ``z`` als ``z = Z exp(i phiz)`` mit *reellen* ``Z`` und ``phiz`` ist nicht eindeutig: ``Z exp(i phiz) == (-Z) exp(i [phiz + pi])``, d.h. bei Parametrisierung mit ``Z`` und ``phiz`` ist auch die Parametrisierung mit ``-Z`` und ``phiz + pi`` richtig.  Die Parametrisierung wird eindeutig wenn man ``Z > 0`` fordert.  Bei ``Z == 0`` wird auch der Winkel uneindeutig.

Fordert man ``A > 0`` und ``U > 0``, so gilt::

    uabs = A +- (mu U)


.. rubric:: Freitag, d. 10. August 2018, 17:06 Uhr in KH


1.  Neudurchrechnung mit ``A, U > 0``

2.  Inbezugsetzung zum Ergebnis *ohne* ``A, U > 0``


Erneute Berechnung von ``uabs = squ ** 0.5``
--------------------------------------------

Verschwinden des Imaginaerteils von ``uabs``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Wir fordern ``A > 0`` und ``U >= 0``.

In [:115] hat sich ergeben::

    squ == |a| ^ 2 +- 2 mu A U

Also auch::

    squ == A ^ 2 +- 2 mu A U

Wir berechnen::

    uabs = squ ** 0.5

Die Instruktionen in ``Binary.__call__`` sind:

1.  ``x1 = squ`` und ``x2 = 0.5``, also ``y1 = squ.nominal = A ^ 2`` und ``y2 = 0.5``.  ``result = undarray(y1 ** y2) = undarray(A)``.

2.  Es wird nur bzgl. ``x1`` ein ``.depend``-Aufruf durchgefuehrt.  Dabei ist die Ableitung::

        y2 * (y1 ** (y2 - 1)) == 0.5 * y1 ** -0.5 == 0.5 / A

    Dann wird ausgefuehrt::

        result.depend(other=squ, derivative=(0.5 / A))

    Im ``.depend``-Aufruf gilt dann:

    a.  ``source = squ.dependencies[0] == {2 mu A U}``.

    b.  ``source_remnant = source * derivative == {2 mu A U} * (0.5 / A) == {mu A U / A} = {mu U}``.

    c.  ``result.append(source_remnant)`` (wenn man das Broadcasting von ``source_remnant`` auf den *shape* von ``result`` vernachlaessigt).

Es ergibt sich also insgesamt::

    uabs = A +- (mu U)

Da ``A``, ``mu`` und ``U`` allesamt reelle Zahlen sind, kann eine Varianz und eine Standardabweichung von ``uabs`` berechnet werden.  Es ergibt sich fuer die Varianz::

    Var(uabs) = (mu U) ^ 2

und fuer die Standardabweichung (man beachte dass ``U >= 0`` vorausgesetzt wurde)::

    uabs.stddev = |mu| U


Interpretation des Terms ``(mu U)`` in [:246]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Es wurde am Anfang gesetzt::

    a = A exp(i phia)

mit ``A > 0``.  ``A`` ist stets eindeutig bestimmt.  Fuer ``A > 0`` ist auch ``phia`` bis auf ein Vielfaches von ``2 pi`` eindeutig bestimmt.  Die Berechnung von ``mu`` (siehe oben [:113])::

    mu = cos(phia - phiu)

projiziert dann fuer die *Abhaengigkeit* von ``uabs`` den Vektor von ``u`` in der komplexen Ebene auf die Richtung des Vektors von ``a`` in der komplexen Zahlenebene::

    uabs = A +- (mu U)

Die Vektoren von ``u`` und ``a`` weisen in der komplexen Zahlenebene stets in dieselbe Richtung wie ``exp(i phiu)`` und ``exp(i phia)``, wenn ``A > 0`` bzw. ``U > 0`` gilt.

Falls ``A == 0`` gilt, kann ``phia`` beliebige Werte annehmen.  Die *Abhaengigkeit* von ``uabs`` ist damit ebenso nicht laenger eindeutig bestimmt.  Das Fehlgehen des Algorithmus zur Berechnung der Unsicherheit von ``uabs`` ist mit der Beliebigkeit von ``phia`` in Einklang: Der Algorithmus *kann* gar nicht ein richtiges Ergebnis liefern, *weil es kein solches gibt*!

Falls ``U == 0``, kann analog ``phiu`` beliebige Werte annehmen; auch in diesem Fall ist ``mu`` nicht laenger bestimmt.  Da ``U == 0`` angenommen wurde, ist die Projektion in diesem Fall stets null, sodass die Unsicherheit von ``uabs`` trotzdem als Null bestimmt werden kann (``mu U == 0`` fuer beliebige ``mu``, wenn ``U == 0`` gilt).

Fuer den Nominalwert ``A`` von ``uabs`` ist die Unsicherheit ``u`` generell irrelevant.


Inbezugsetzung zum Ergebnis [:171] *ohne* ``U, A > 0``
------------------------------------------------------

In [:171] wurde angegeben::

    uabs = |a| +- (mu U sign(A))

Wenn ``A > 0``, ist dies von der Form::

    uabs = |a| +- (mu U)

und stellt die Projektion von ``u`` auf ``a`` dar.  Das *Vorzeichen* von ``U`` wird in das Vorzeichen der Projektion *vererbt*.  Die Richtungsumkehr von ``u`` in der komplexen Zahlenebene bei Vorzeichenumkehr von ``U`` fuehrt zum Vorzeichenumkehr der Projektion von ``u`` auf ``a``.

Im Falle dass ``A < 0``, ergibt sich::

    uabs = |a| +- (-mu U A)

Auch dies stellt dann die Projektion auf ``a`` dar, dessen Richtung in der komplexen Zahlenebene der von ``exp(i phia)`` entgegengesetzt ist.

In allen Faellen stellt also der Term [:286] die Projektion des Vektors von ``u`` in der komplexen Zahlenebene auf den von ``a`` dar.

..  Todo:

    1.  "Richtung" und "Projektion" sollten besser gefasst werden, denn der *Winkel* ist nur bis auf Vielfache von ``2 pi`` bestimmt.  Vielleicht kann man statt des Winkels ``exp(i phi)`` heranziehen.

    2.  Die Randfaelle ``U == 0`` und ``A == 0`` sollten klarer behandelt werden.


.. rubric:: Donnerstag, d. 7. Mai 2020, 18:07 Uhr und Freitag, d. 8. Mai 2020, ca. 13:45 Uhr


Analytische Berechnung der Ableitung des Absolutwerts bzgl. komplexer Argumente
-------------------------------------------------------------------------------

In [:83] hat sich ergeben::

    squ = [a * a.conj()] +- [u * a.conj() + u.conj() * a] = vsqu +- usqu

Wir bilden nun die Wurzel dieses Ausdrucks, in der allgemeinen Form wie es hier gegeben ist.  Der Ausdruck sei wie folgt notiert::

    abs = vabs +- uabs

Er wird berechnet als::

    abs = squ ** 0.5

Der Nennwert ``vabs`` ist schlicht::

    vabs = sqrt(a * a.conj())

Dieser Wert kann ohne Weiteres gebildet werden, weil ``a * a.conj()`` reell und positiv definit ist.

Im Folgenden betrachten wir die instruktionen in ``Binary.__call__(squ, 0.5)``.  Nur bzgl. ``squ`` wird ein ``.depend``-Aufruf durchgefuehrt.  Dabei ist die Ableitung von ``abs`` bzgl. ``squ`` [:153 ff.]::

    0.5 * squ ** (-0.5) = 0.5 / sqrt(a * a.conj())

Es wird dann ausgefuehrt [:157 ff.]::

    result.depend(other=squ, derivative=(0.5 / sqrt(a * a.conj())))

also::

    source = {squ} = (u * a.conj() + u.conj() * a)

und weiter::

    source_remnant = source * derivative = (u * a.conj() + u.conj() * a) * 0.5 / sqrt(a * a.conj())

Dieser kann in zwei Richtungen weiterentwickelt werden::

    source * derivative = Re(u * a.conj()) / sqrt(a * a.conj())

oder::

    source * derivative = 0.5 * ( (u * sqrt(a.conj() / a)) + (u.conj() * sqrt(a / a.conj())) )

Mit::

    p = a / a.conj()

ergibt sich also::

    source * derivative = 0.5 * (u * sqrt(1/p) + u.conj() * sqrt(p))

Setzen wir::

    a = a_mag * exp(1j * a_ang)

so ergibt sich::

    a.conj() = a_mag * exp(1j * -a_ang)
    1 / a.conj() = 1/a_mag * exp(1j * a_ang)

also::

    p = exp(1j * 2 a_ang)
    1/p = exp(1j * -2 a_ang)

mithin::

    sqrt(p) = exp(1j * a_ang)
    sqrt(1/p) = exp(1j * -a_ang)

Es gilt also::

    1/p = p.conj()

Also weiter in [:363]::

    source * derivative
    = 0.5 * (u * sqrt(p.conj()) + u.conj() * sqrt(p))
    = 0.5 * (u * sqrt(p).conj() + u.conj() * sqrt(p))
    = Re(u * sqrt(p).conj())

woraus sich per [:359] ergibt::

    source * derivative = Re(u * sqrt(a.conj() / a))

bzw.::

    source * derivative = Re(u * exp(1j * -a_ang))

Man beachte dass die Magnitude dieser Abhaengigkeit *ausschliesslich* von der Magnitude von *u* abhaengt, und unabhaengig von der Magnitude von *a* ist.  Lediglich der *Winkel* von *a* in der komplexen Zahlenebene hat Eingang.  Der Ausdruck laesst sich mit::

    u = u_mag * exp(1j * u_ang)

weiterentwickeln zu::

    source * derivative = Re(u_mag * exp(1j * u_ang) * exp(1j * -a_ang)) = Re(u_mag * exp(1j * [u_ang - a_ang]))

Dies bestaetigt die fruehere Beobachtung, dass die Abheangigkeit von ``abs(a +- u)`` genau die Projektion von ``u`` auf die Richtung von ``a`` ist.  Wenn ``u`` und ``a`` in dieselbe Richtung weisen, d.h. wenn ``u_ang = a_ang`` gilt, ergibt sich genau ``u_mag`` fuer ``source * derivative``.  Sind sie orthogonal zueinander, so gilt ``source * derivative = 0``.  Sind sie antiparallel ausgerichtet, ergibt sich ``source * derivative = -u_mag``.

Fuer die algorithmische Umsetzung ist sicherlich [:397] am besten verwendbar.
