.. vim: syntax=rst

upy Kontexte
############

Ziele
=====

1.  Threadlokale Speicherung von Typesetter-Eigenschaften und von Eigenschaften von :func:`u` (welche noch zu erzeugen ist);
2.  Vererbung von Kontext-Eigenschaften;
3.  Benutzung als Python Kontext-Manager (Doppelung der Namensgebung ...);

Ein Schema zur Erreichung der Ziele soll hier entwickelt werden.


Ueberlegungen
=============

Eine Festverdrahtung von z.B. :class:`ScientificTypesetter` in den Kontext-Code ist nicht erwuenscht.  Nutzer des Kontextes (wie z.B. :class:`ScientificTypesetter`) greifen auf den Kontext-Code zu, nicht umgekehrt.

Gibt es pro Thread hoechstens genau einen Kontext, oder ist auch dies eine fakultative Sache: Wenn man einen Kontext als Python Kontext-Manager verwendet, traegt er sich in die upy-Registratur der Kontexte ein?

Uebernahme eines vorhandenen Kontextes in einen neuen Thread::

    ctx = upy.Context(inherit=father_context)

    with ctx:
        [...]

Vermutlich gibt es pro Kontext (:class:`upy.Context`) mehrere 'Realms', in welchen die Nutzer des Kontext-Frameworks ihre Einstellungen speichern.  Jeder Realm enthaelt mehrere "Eintraege" fuer verschiedene Versionen?  Wie werden die Daten geschrieben?

Vielleicht ist es sinnvoll, erst ein Design zu entwickeln, welches *noch nicht* die zentrale upy-Registratur enthaelt, und erst bei Designerfolg dessen die Zentral-Registratur zu entwerfen, um die Verwendung zu vereinfachen.  Z.B. so::

    ctx = upy.Context()

    uarray = 10 +- u(4.2, context=ctx)

Aus diesem Code wuerde dann::
    
    with upy.Context() [as ctx]:
        uarray = 10 +- u(4.2)

Code wie z.B.::

    ctx.u(4.2)

ist *nicht* erwuenscht, weil dies sicherlich Festverdrahtung des Konzeptes ":func:`u`" in der Kontext-Klasse erfordert.

-----

Vielleicht kann man fuer jeden Nutzer des Kontext-Mechanismus' einzelne Kontext-Manager (der Name passt hier) einfuehren::
    
    with upy.typesetters.scientific.ScientificContext(stddevs=2, precision=2):
        print uarray
    
    # Dies erfordert, dass der ScientificContext von :class:`undarray` abgefragt wird.

oder::
    
    with upy.typesetters.scientific.ScientificContext(stddevs=2, precision=2) as ctx:
        print ctx.typeset(uarray)  (1)
        - oder -
        print uarray.typeset(context=ctx)  (2)

Vermutlich ist es sinnvoll, zu verlangen, dass die Kontext-Manager von Beginn an vollstaendig spezifiziert sind.  Ausserdem kann vielleicht ein gemeinsames Protkoll fuer alle schriftsetzenden Kontexte definiert werden.

Welcher Unterschied besteht zwischen :class:`ScientificContext` und :class:`upy2.typesetters.scientific.ScientificTypesetter`?  Kann man vielleicht :class:`ScientificTypesetter` direkt als Kontext-Manager verwenden?

Vererbung wuerde dann explizit fuer die jeweilige Kontext-Klasse geschehen::

    with ScientificTypsetter(stddevs=2, prevision=2) as toplts:
        [use topltx ...]

        with ScientificTypesetter(typeset_possign_value=True, inherit=toplts) as subts:
            [use subts ...]

Impliziter Aufruf des jeweiligen Typesetters nutzt den auf dem Thread-Stack ganz oben liegenden Typesetter.  Andernfalls ist der aequivalente Code::

    print typesetter.typeset(uarray)

Dies waere im Grunde auch das, was :meth:`uarray.__str__` tut: Weiterreichen zum jeweiligen Typesetter.

Es wuerden fuer alle "Familien" von Kontexten einzelne Stacks eingefuehrt.  Z.B.::

    with Convention(stddevs=2):
        ua = 10 +- u(4.2)

oder::

    with Convention(stddev=2) as c:
        ua = 10 +- c.u(4.2)

Der Name "Convention" ist dabei noch nicht stabil.

Verhalten bei mehreren Threads; offene Fragen:

1.  Vererbung wird explizit durchgefuehrt.  Code wie::

        with ScientificTypesetter(stddevs=2, precision=2):
            # Use with two stddevs printout at precision 2 ...
            with ScientificTypsetter(stddevs=3):
                # Use with three stddevs and inherit precision=2 ...

    wird *nicht* unterstuetzt, weil der Vater-Kontext und der Kind-Kontext Instanzen verschiedener Klassen sein koennen (z.B. ``ScientificTypesetter`` & ``IntegerTypsetter``).  Die Vererbung ist *nicht* Teil des Protokolls fuer bspw. Typesetter.

    Wenn man weiss was man tut ist vielleicht folgendes moeglich::
        
        with ScientificTypesetter(stddevs=2, precision=2):
            with ScientificTypesetter(inherit=upy.typesetters.current(), precision=3):
                # Use modified typesetter ...

    Dies ist aeusserst unsauber; die Registries fuer Typesetter sollten *nie* von Usercode beruehrt werden.  Die Registries verwalten die Stacks von Typesetters fuer jenen Thread; die Funktionalitaet zaehlt zur privaten API von upy.

2.  Auf diese Weise ist auch das Problem geloest, von welchem Typesetter "automatisch" vererbt werden soll: Vom letzten Typesetter im Stapel des jew. threads oder vom globalen Typesetter?  Tatsaechlich wird von *keinem* Typesetter automatisch vererbt.

3.  Gibt es ueberhaupt einen globalen Typesetter?  Es waere immerhin wuenschenswert, einen Default-Typesetter durch upy definieren zu lassen.  Vielleicht waere es aber sogar sinnvoll, *keinen* Typesetter als "Standard" auszuzeichnen.  Damit der Usercode nicht einen ``with``-Block um das gesamte Programm legen muss, gibt es folgenden Loesungsansaetze::

        upy2.set_default_typesetter(ScientificTypesetter(stddevs=2, precision=2))

    oder::
        
        upy2.ScientificTypesetter(stddevs=2, precision=2).register()

    Ersteres ist wohl sauberer.
    
    Der globale "Default"-Typesetter wird verwendet, wenn der Stapel des aktuellen Threads leer ist.

    Ein ``upy2.get_default_typesetter()`` sollte es genauso wenig geben wie obigen [:109] Code ``upy.typesetters.current()``.

4.  upy stellt einen Mechanismus zur Verfuegung, um z.B. die Typesetting-Stacks zu handhaben.  Dabei ist dieser Code agnostisch gegenueber seinem Zweck.  Die Verwendung fuer bspw. Typesetter wird erst durch die Typesetter-Klassen spezifiziert.  Es wird derselbe Mechanismus fuer Typesetters wie auch fuer :func:`u` verwendet.

5.  Eine Methode :meth:`register` wird wahrscheinlich *nicht* bereitgestellt, man nutze einen ``with``-Block oder :func:`upy.set_default_typesetter`.  Allein: Dies geht nicht konform mit der Forderung, dass der Mechanismus agnostisch sein soll.  Also::

        typesetter.default()

    Dies registriert den Typsetter *typesetter* als globalen Standard.

    Vielleicht waere es doch sinnvoll, ausserdem::

        typesetter.register()

    ala [:122] zuzulassen?  Dies wuerde die Instanz threadlokal speichern.

6.  Threadstapel werden geloescht, sobald sie leer sind.  Andernfalls drohen Speicherlecks.

7.  Als Schluessel der Threadstapel-Sammlungen kann die Klasse dienen, welche das jeweilige Protokoll implementiert.  Bspw. teilen alle Typesetter das Protokoll, uarrays setzten zu koennen::

        typesetter.typeset(uarray)

    Indem die das Protokoll definierende Klasse als Schluessel dient, wird automatisch alles richtig voneinanden unterschieden.  Die Gefahr von Namenskollisionen wird so wirkungsvoll gebannt.

8.  :class:`uarray` greift in :meth:`__str__` auf die Stacksammlung unter dem Schluessel der Typesetter-Protokollklasse zu.  Auf diese Weise wird die Typesetter-Stackliste mit :class:`uarrray` verbunden.

Entwurf des Registry-Frameworks::

a.  


.. rubric:: Mittwoch, d. 28. September 2016


Der Text bis hierher wurde am 4. September 2016 < 15:47 Uhr geschrieben.

Ueber ``typesetter.register()`` ist noch zu entscheiden; die Syntax hat den Nachteil dass der Aufruf von ``typesetter.unregister()`` leicht vergessen wird wodurch Speicherlecks drohen bei Beendigung des jew. Threads, und wodurch der vorherige Typesetter nicht wiederhergestellt wird.

``typesetter.default()`` ist sicherlich sinnvoll.

Kontexte gibt es fuer jeden Schluessel.  Jeder Kontext hat einen globalen Default-Eintrag, welcher fuer alle Threads Verwendung finden kann.  Ausserdem sind im jeweiligen Kontext Stapel fuer jeden Thread vorhanden.  Diese werden geloescht sobald sie leer sind.  Ein Eintrag im jeweiligen Threadstapel geschieht durch die Verwendung des jeweiligen Objektes als Python-Kontextmanager.

Kontexte werden nicht erst pro Thread definiert, weil dann keine Moeglichkeit besteht, den globalen Standard-Eintrag zu speichern.

Zu benennende Objekte/Konzepte:

-   Der "Kontext".  Kontexte werden durch ihren Schluessel voneinander unterschieden.  Die Registratur der Kontexte ist global.  Threads spielen hier noch keine Rolle.
-   Der "Threadstapel".  Dieser speichert die "Eintraege", welche bei der Ausfuehrung des Threads registriert werden.
-   Der "Eintrag".  Dieser betrifft das letztendlich verwendete Objekt.

Ein Kontext hat einen globalen Default-Eintrag und eine Anzahl Threadstapel.  Wenn der Default-Eintrag noch nicht definiert wurde, wird ``None`` gespeichert.

Es ist noch nicht ganz sicher, ob der "Eintrag" eine eigene Klasse braucht, oder ob es genuegt, das betreffende Objekt direkt in der Liste des Threadstapels zu speichern.

Ausserdem ist nicht ganz klar, ob der "Threadstapel" eine eigene Klasse braucht, oder ob hier eine einfache Python-Liste genuegt.

Es ist nicht unbedingt notwendig, dass der Nutzer einen Default-Eintrag definiert.  Default-Eintraege koennen vermutlich nicht geloescht werden, weil ``typesetter.undefault()`` nicht sinnvoll ist, aber ein direkter Nutzerzugriff nicht gewuenscht ist (der Nutzer muesste die Schluesselklasse kennen).  P.S.: ``typesetter.undefault()`` kann sinnvoll sein, wenn der ``typesetter`` dabei der gegenwaertige Default-Eintrag *ist*.

Die Registratur der Threadstapel wird vom Kontext durchgefuehrt.  Beim Aufruf kann der Kontext den Thread-ID (Identifikator) selber abfragen.  Ausserdem kann der Kontext bei der Abmeldung feststellen, ob der jeweilige Threadstapel leer geworden ist.

Abmeldung: Dies geschieht nicht durch ``threadlist.remove(item)``, sondern erfordert, dass der uebergebene Eintrag der letzte Eintrag in der Liste ist.  Andernfalls tritt eine Ausnahme auf.  Grund: Ein Eintrag kann mehrfach registriert werden; und Eintrage werden sinnvoller Weise in der Reihenfolge zurueckgenommen wie sie publiziert wurden.

Es ist nicht sinnvoll, die bisher als global angenommenen Funktionen in eine Klasse ala ``ContextManager`` zu kapseln, denn dann ist eben die Instanz dessen global; es ist unvermeidlich irgendwann upy2-globale Objekte zu erzeugen.

Interfacing der Kontexte:

a)  Man speichert den zu verwendenden Schluessel als Attribut der Klasse, bspw. die Protkoll-Klasse fuer Typesetter als Attribut einer Klasse, deren Kontextschluessel diese Protokoll-Klasse ist.


.. rubric:: Dienstag, d. 11. Oktober 2016, 16:01 Uhr


-   ContextManager: eine Instanz einer Protokoll-Klasse (per Subclassing).  Bei der Verwendung als Python-Kontextmanager wird der richtige Kontext (die richtige Instanz von ``class Context``) gefunden, indem fuer die Schluessel in der Registratur ``isinstance(contextmanager, key)`` verwendet wird.  ContextManager koennen sich somit automatisch in den richtigen Kontext eintragen.  Der Code von ``class ContextManager`` ist allgemein fuer alle upy2-Kontextmanager direkt verwendbar.

-   Benutzer von Kontexten: Man sucht das richtige Protokoll heraus, indem der bekannte Schluessel (eine Protokoll-Klasse) mit den Schluesseln der Registratur verglichen wird.  Mglw. kann dabei ``issubclass`` Verwendung finden.

    Dann ruft der Kontext-Benutzer den Code des Protokolls auf.  Beispiel: Typesetter, ``typesetter.typeset_uarray(self)`` in ``uarray.__str__``.

-   Protokoll: Dies ist beispielsweise die Klasse ``Typesetter``, welche das Interface eines Typesetters definiert: :meth:`typeset_uarray`.

-   ``issubclass`` in Benutzercode:

    a)  Der Schluessel muss eine Unterklasse der uebergebenen Protokoll-Klasse sein; oder
    b)  Der Schluessel muss eine Oberklasse der uebergebenen Protokoll-Klasse sein.


.. rubric:: Mittwoch, d. 12. Oktober 2016, 9:14 Uhr, Universitaetsbibliothek


::

    :class:`ContextManager`
        |
        |       Protokollklasse, hier genannt :class:`Protocol`, bspw. :class:`Typesetter`
        |           |
    in diesem Fall ein spezieller Typesetter, bspw. :class:`ScientificTypesetter`

:class:`ScientificTypesetter` erbt sowohl von :class:`upy2.context.ContextManager` als auch von :class:`Typesetter`.  Ersterer sorgt fuer die Python-Kontextmanagerfunktionalitaet, letzterer ist der Schluessel zur Registratur.

Das Modul, welches :class:`Typesetter` definiert, erstellt auch den upy2-Kontext in :mod:`upy2.context`.  Das Modul verwendet dabei :class:`Typesetter` als Schluessel.

Fuer :class:`ContextManager` muss die aufrufende Klasse eine Unterklasse der Protokollklasse sein.

Benutzer von Kontexten uebergeben die Schluesselklasse explizit (bspw. :class:`undarray`); Kontextmanager uebergeben sie *implizit* durch die Klasse, deren Instanz sie sind.  Demnach sollte fuer Benutzer die uebergebene Protokoll-Klasse eine *Unterklasse* der Schluesselklasse in der Registratur sein.  Es trifft von [:210 f.] (b) zu.


.. rubric:: Donnerstag, d. 10. November 2016, 18:24 Uhr


Bei der Benutzung von :mod:`upy2.context` stellt sich heraus, dass *alle* von der jeweiligen Protokollklasse abgeleitete Klassen stets auch von :class:`upy2.context.ContextProvider` erben.  Aus diesem Grund wurde die jeweilige Protokollklasse direkt von :class:`upy2.context.ContextProvider` abgeleitet.  Die Beispiele sind:

1.  :class:`ScientificTypsetter`::

        :class:`upy2.context.ContextProvider`
            |
            |
        :class:`upy2.typesetting.protocol.Typesetter`
            |
            |
        :class:`upy2.typesetting.scientific.ScientificTypesetter`

    Die Protokollklasse ist hier :class:`upy2.typesetting.protocol.Typesetter`.

2.  :class:`upy2.core.U`::

        :class:`upy2.context.ContextProvider`
            |
            |
        :class:`upy2.core.U`

    :class:`upy2.core.U` wird hier direkt verwendet.  :class:`upy2.core.U` ist ausserdem die Protokollklasse.

Die Protokollklassen sind in diesen beiden Beispielen bereits Unterklassen von :class:`upy2.context.ContextProvider`.

Es ergibt sich hieraus der Vorschlag, :class:`upy2.context.ContextProvider` in :class:`upy2.context.Protocol` oder :class:`ContextProtocol` umzubenennen, da sie sich als der Prototyp der tatsaechlichen Protokoll-Klassen herausgestellt hat.

Es ist die Frage, ob die Klassen, welche das jeweilige Protokoll implementieren, immer auch von :class:`upy2.context.ContextProvider` erben.  Diese Frage ist mit Ja zu beantworten, denn ohne ein solches Erbe kann die jeweilige Klasse sich nicht in den upy2-Kontext des Protokolls eintragen und als Python-Kontextmanager verwendet werden.

Protokollklassen sind damit zweckmaessigerweise *immer* bereits Unterklassen von :class:`upy2.context.ContextProvider`.  :class:`ContextProvider` ist daher der Prototyp aller Protokoll-Klassen.  Ein treffender Name ist daher :class:`upy2.context.Protocol`.  *Interessant!*


.. rubric:: Sonntag, d. 17. Septemer 2017, 13:30 Uhr


Bemerkungen zur Benennung der involvierten Konzepte:

1.  upy2-Kontexte sind Instanzen von :class:`upy2.context.Context`.

2.  Die Implementierungen von upy2-Protokollen sind Instanzen von Unterklassen von :class:`upy2.context.Protocol`.

3.  Instanzen von :class:`upy2.context.Protocol` (via davon abgeleiteter Klassen) koennen als *Python Kontext-Manager* verwendet werden.

4.  Die *Protokolle* sind die Konvention, welche von allen von einem *Kontext* zurueckgegebenen Objekte einzuhalten ist.  Die "Erfuellung der Konvention" oder die "Einhaltung des Protokolls" wird durch Ableitung von der jeweiligen Protokoll-Klasse implementiert.  Dies kann dann fuer die Ermittlung des fuer eine Protokoll-Implementierung massgebenden Kontextes verwendet werden.

Das Wort "Manager" wurde bereits aus dem Namen ``upy2.context.ContextManager`` gestrichen.  Es tritt daher keine Doppelung von "Kontext-Manager" auf:  Ein *Kontext* ist *immer* ein ``upy``-Konstrukt und das Wort "Kontext-Manager" wird eindeutig fuer die Verwendung einer Instanz von :class:`upy2.context.Protocol` in einem ``with``-Statement verwendet.

Ich habe lange ueberlegt ob man die Worte zugunsten der Verwendung von "Konvention" (*Convention*) umsortiert, aber:

-   Die gegenwaertige Benennung ist stringent und eingaengig.

-   Es handelt sich *in der Tat* in beiden Faellen (:class:`upy2.context.Context`-Instanzen und als Python-Kontext-Manager verwendete :class:`upy2.context.Protocol`-Instanzen) um *Kontexte*.  Tatsaechlich sind als Python-Kontext-Manager verwendete :class:`upy2.context.Protocol`-Instanzen der *Manager* eines *upy2-Kontextes*.  Die Benennung ist also sogar *richtig* in der Verwendung desselben Wortes *Kontext* in beiden Faellen!

Die Nomenklatur ist daher in ihrem gegenwaertigen Zustand zu begruessen.


.. rubric:: Mittwoch, d. 20. September 2017, 12:51 Uhr im FWW


Soll :meth:`upy2.context.Protocol.__enter__` ``self`` zurueckgeben oder nicht?

Moegliche Szenarios zur Verwendung einer Protokoll-Implementation:

1.  Im lokalen Scope und *nicht* ausserhalb dessen::

        u = U(2)
        x = v +- u(...)

    Die Funktionalitaet [:296] wird hier nicht gebraucht.

2.  Im lokalen Scope *und* ausserhalb dessen::

        with U(2):
            x = v +- u(...)

    mit ``upy2.core.u`` als ``u``.  [:296] wird auch hier nicht gebraucht.

3.  *Nur* ausserhalb des aktuellen Scopes und *nicht* innerhalb dessen::

        ... Definition eines eigenen ``u`` ...

        with U(2):
            ...

    Auch hier wird [:296] nicht gebraucht.

4.  Der einzige verbleibende Fall ist, dass die Protokoll-Implementation *gar nicht* gebraucht wird; auch dann ist [:296] freilich nicht notwendig.

Eine Verwendung von Protokoll-Implementierungen ``P`` ala::

    with P(...) as p:
        ... nutze p ...

wird also *nie* gebraucht.  Lediglich im Fall (2.) *koennte* geschrieben werden::

    with U(2) as u:
        x = v +- u(...)

aber da ist es stringerter *direkt* ``upy2.core.u`` zu verwenden und auf den ``U``-Kontext zuzugreifen.

Die Funktionalitaet [:296] wird folglich absichtlich *nicht unterstuetzt*.
